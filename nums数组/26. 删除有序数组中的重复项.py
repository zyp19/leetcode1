"""26. 删除有序数组中的重复项(第一遍没有做出来)
给你一个有序数组 nums，请你原地删除重复出现的元素，使每个元素只出现一次 ，返回删除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组 并在使用 O(1) 额外空间的条件下完成。
说明:
为什么返回数值是整数，但输出的答案是数组呢?
请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
你可以想象内部操作如下:
// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
int len = removeDuplicates(nums);
// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
"""
"""
不足之处：
1.删除某个元素之后，i还是原来的指向，这种情况该怎么办呢？
2.for i in range(len(k))这个东西i只是一个超级局部变量，无法把它变成全局变量也无法把它在for循环中改变，他只能每次执行完for循环
中的东西就执行 i =i + 1 的操作
"""
"""
思路：使用快慢指针。为甚么我就想不到呢！
首先注意数组是有序的
1.令索引 i 为慢指针，索引 j 为快指针，快指针正常遍历数组，一次走一步
2.如果快指针和慢指针所指的元素不相同，证明慢指针所指元素的重复已结束，索引 i + 1，并把新的元素赋给索引 i 处
3.也就是说，慢指针记录的是非重复元素的索引，最后返回非重复元素个数为 i + 1
"""
from typing import List
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        i = 0
        for j in range(1, len(nums)):
            if nums[j] != nums[i]:
                i += 1
                nums[i] = nums[j]
        return i + 1
solution = Solution()
len = solution.removeDuplicates([0,0,1,1,1,2,2,3,3,4])
print(len)



        
