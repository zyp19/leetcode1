能回忆起来的元组知识：
1.元组是不可变的，即像字符串一样，其可以被另一个元组赋值，但元组内部的元素不可以发生改变。
2.元组使用小括号标明，例如a = ("banana","orange","apple")，不确定其中的元素是否是相同类型的。
3.元组常见的API：
应该是和集合、列表类似
1）向元组中增加元素：a.add("peach")
2) 向元组中删除元素：a.remove("banana")# 这条语句就犯了一个很严重的错误，即元组是不可变的，不可以对元组中的元素进行改变！要进行删除操作也只能
删除整个元组。
博客中总结的元组知识：
1.正确，例如：
>>> tup = ('r', 'u', 'n', 'o', 'o', 'b')
>>> tup[0] = 'g'     # 不支持修改元素
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> id(tup)     # 查看内存地址
4440687904
>>> tup = (1,2,3)
>>> id(tup)
4441088800    # 内存地址不一样了
博客中有一句话：所谓元组的不可变指的是元组所指向的内存中的内容不可变。就像上例所述，如果强行给tup赋值，相当于tuple是一个新的元组，跟之前的tup内存
地址是不一样的。
2.元组确实使用小括号标明，但是元组中的元素可以是不用类型的，如：
tup1 = ('Google', 'Runoob', 1997, 2000)
3.元组常见的API
1)创建空元组：
tup1 = ()
注意：元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：
>>> tup1 = (50)
>>> type(tup1)     # 不加逗号，类型为整型
<class 'int'>

>>> tup1 = (50,)
>>> type(tup1)     # 加上逗号，类型为元组
<class 'tuple'>
2）元组与字符串类似，下标索引从 0 开始，可以进行截取，组合等。
正向索引和反向索引的知识见：https://www.runoob.com/python3/python3-tuple.html
3）元组中常见的操作：
3.1 访问元组：使用元组下标的索引来访问，即和列表中的切片操作是一样的。
tup1 = ('Google', 'Runoob', 1997, 2000)
tup2 = (1, 2, 3, 4, 5, 6, 7 )

print ("tup1[0]: ", tup1[0])
print ("tup2[1:5]: ", tup2[1:5])
输出结果：
tup1[0]:  Google
tup2[1:5]:  (2, 3, 4, 5)
3.2 修改元组：元组中的元素是不可以发生改变的，但是可以进行元组之间的拼接：
tup2 = ('abc', 'xyz')

# 以下修改元组元素操作是非法的。
# tup1[0] = 100

# 创建一个新的元组
tup3 = tup1 + tup2
print (tup3)
输出结果：(12, 34.56, 'abc', 'xyz')
3.3 删除元组：元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:
tup = ('Google', 'Runoob', 1997, 2000)

print (tup)
del tup
print ("删除后的元组 tup : ")
print (tup)
以上实例元组被删除后，输出变量会有异常信息，输出如下所示：

删除后的元组 tup :
Traceback (most recent call last):
  File "test.py", line 8, in <module>
    print (tup)
NameError: name 'tup' is not defined
3.4 元组运算符
与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。
Python 表达式	                        结果	                          描述
len((1, 2, 3))	                         3	                       计算元素个数
(1, 2, 3) + (4, 5, 6)	          (1, 2, 3, 4, 5, 6)	             连接
('Hi!',) * 4	               ('Hi!', 'Hi!', 'Hi!', 'Hi!')	         复制
3 in (1, 2, 3)	                        True	                  元素是否存在
for x in (1, 2, 3): print (x,)	       1 2 3	                     迭代


