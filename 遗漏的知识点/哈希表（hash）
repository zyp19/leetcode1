1.哈希表的定义
python中的字典dict和集合set查找速度很快，是因为使用了哈希表。
数组在查找过程中的时间复杂度是O（1），但是插入和删除数组中的元素却要移动其他元素，因此平均时间复杂度是O（n）
链表在查找过程中可以通过指针来查找，因此时间复杂度是O（n），但是删除或插入只需要移动它的前驱和后继，因此是O（1）
定义1：哈希表通过给顺序表（数组、链表）、非顺序表（集合、字典）等数据结构中的一些元素一个逻辑下标，快速定位和删除元素。它通过一个哈希函数
来计算每个元素应放在数组中的哪个位置。
定义2：哈希表（散列表）是根据键（Key）直接访问内存存储位置的数据结构。根据键（Key）值将数据映射到内存中一个位置的函数称为哈希函数，
根据哈希函数建立的记录数据的表称为哈希表。
2.哈希表的特点
1）若关键字为 k，则其值存放在 f(k) 的存储位置上。由此，不需比较便可直接取得所查记录。称这个对应关系 f 为散列函数，按这个思想建立的表为散列表。
哈希碰撞：对不同的关键字k可能得到同一散列地址（内存地址），即 k1≠k2，而 f(k1) = f(k2) ，这种现象称为冲突。
2）若对于关键字集合中的任一个关键字，经散列函数映象到地址集合中任何一个地址的概率是相等的，则称此类散列函数为均匀散列函数（Uniform Hash function），
这就是使关键字经过散列函数得到一个“随机的地址”，从而减少冲突。
3.哈希表的效率：
搜索：查找某个key，即通过f(k)，找到k的内存地址，时间复杂度是O(1)；如果一旦发生碰撞，则时间复杂度为O(n)，n是碰撞元素的个数
插入：插入某个key，也是通过f(k)，找到k的内存地址然后把k插入进去；
删除：删除某个key，也是通过f(k)，找到k的内存地址然后把k删除。
4.哈希冲突的处理方法：
4.1开放定址法：产生冲突之后去寻找下一个空闲的空间，函数定义为：hash(i) = (hash(key)+d(i)) mod m, i = 1,2,...k (k小于等于m-1)
其中，hash(key)是哈希函数，d(i)是增量函数，i是冲突的次数，m是哈希表的长度
线性探测法：if d(i)==i，或其他线性函数
平方探测法：if d(i)==i^2
4.2链表法：当不同的key遇到相同的地址时，或者说散列在同一位置的元素，不是继续向下探测，而是在这个位置放一个链表，这些元素都放在这个链表上。
4.3建立公共溢出区：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表(注意：在这个方法里面是把元素分开两个表来存储)。